// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Utility service for checking web browser type.
 */


import {Injectable} from '@angular/core';
import {WindowRef} from '../../services/contextual/window-ref.service';
import {ServicesConstants} from '../../services/services.constants';
const constants = require('constants.ts');

@Injectable({
  providedIn: 'root'
})
export class BrowserCheckerService {
  constructor(private window: WindowRef) {}
  // For details on the reliability of this check, see
  // https://stackoverflow.com/questions/9847580/
  // how-to-detect-safari-chrome-ie-firefox-and-opera-browser#answer-9851769
     isSafari = /constructor/i.test(this.window.nativeWindow.HTMLElement) || (
       function(p) {
         return p.toString() === '[object SafariRemoteNotification]';
       })(
       !this.window.nativeWindow.safari ||
        (typeof this.window.nativeWindow.safari !== 'undefined' && this.window.nativeWindow.safari.pushNotification)
     );

     _supportsSpeechSynthesis() {
       let supportLang = false;
       if (window.hasOwnProperty('speechSynthesis')) {
         speechSynthesis.getVoices().forEach((voice) => {
           constants.AUTOGENERATED_AUDIO_LANGUAGES.forEach((audioLanguage) => {
             if (voice.lang === audioLanguage.speech_synthesis_code ||
                (this._isMobileDevice() &&
                    voice.lang ===
                    audioLanguage.speech_synthesis_code_mobile)) {
               supportLang = true;
             }
           });
         });
       }
       return supportLang;
     }

     _isMobileDevice() {
       let userAgent = navigator.userAgent || navigator.vendor ||
           this.window.nativeWindow.window.opera;
       return userAgent.match(/iPhone/i) || userAgent.match(/Android/i);
     }

     supportsSpeechSynthesis() {
       return this._supportsSpeechSynthesis();
     }
     isMobileDevice() {
       return this._isMobileDevice();
     }
}

